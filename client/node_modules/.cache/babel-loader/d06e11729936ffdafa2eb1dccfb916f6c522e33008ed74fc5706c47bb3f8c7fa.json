{"ast":null,"code":"var _jsxFileName = \"/home/james/code/trackhammer/client/src/components/URLInput.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\n\n// Define text input for links\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UrlInput() {\n  _s();\n  const [url, setUrl] = useState(\"\");\n  const buttonRef = useRef(\"null\");\n  const [errorText, setErrorText] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n\n  // Define function for action upon press\n  async function submitSong() {\n    if (!url.trim()) return;\n    const target = \"/api/queue\";\n    console.log(\"Attempting to post\", url, \"to\", target);\n\n    // POST to your back-end endpoint (adjust the URL as needed).\n    try {\n      const resp = await fetch(target, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          url: url.trim()\n        })\n      });\n      if (!resp.ok) {\n        console.error(\"POST Failed\");\n        setErrorText(\"Submission failed, please try again.\");\n        setShowError(true);\n      } else {\n        setUrl(\"\");\n        console.log(\"Success\");\n        setShowError(false);\n      }\n    } catch (err) {\n      console.log(\"Network Error:\", err);\n      setErrorText(\"Error trying to contact server\");\n      setShowError(true);\n    }\n  }\n\n  // Update the value of the url every time it's changed\n  function updateText(e) {\n    setUrl(e.target.value);\n  }\n  function handleKeyDown(e) {\n    if (e.key === \"Enter\") {\n      submitSong();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Song-Entry\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Text-Input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"URL-Input\",\n        name: \"SoundCloud URL Input\",\n        placeholder: \"Enter SoundCloud URL...\",\n        value: url,\n        onChange: updateText,\n        onKeyDown: handleKeyDown,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Hammer-Button\",\n        type: \"button\",\n        onClick: submitSong,\n        ref: buttonRef,\n        children: \"HAMMER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `Error${showError ? \" visible\" : \"\"}`,\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n}\n_s(UrlInput, \"QtShDBuFr5KAHKz7SYpOih1De3Q=\");\n_c = UrlInput;\nvar _c;\n$RefreshReg$(_c, \"UrlInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","UrlInput","_s","url","setUrl","buttonRef","errorText","setErrorText","showError","setShowError","submitSong","trim","target","console","log","resp","fetch","method","headers","body","JSON","stringify","ok","error","err","updateText","e","value","handleKeyDown","key","className","children","name","placeholder","onChange","onKeyDown","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","ref","_c","$RefreshReg$"],"sources":["/home/james/code/trackhammer/client/src/components/URLInput.jsx"],"sourcesContent":["import { useState, useRef } from \"react\";\n\n// Define text input for links\nexport default function UrlInput() {\n\tconst [url, setUrl] = useState(\"\");\n\tconst buttonRef = useRef(\"null\");\n\tconst [errorText, setErrorText] = useState(\"\");\n\tconst [showError, setShowError] = useState(false);\n\n\t// Define function for action upon press\n\tasync function submitSong() {\n\t\tif (!url.trim()) return;\n\t\tconst target = \"/api/queue\";\n\n\t\tconsole.log(\"Attempting to post\", url, \"to\", target);\n\n\t\t// POST to your back-end endpoint (adjust the URL as needed).\n\t\ttry {\n\t\t\tconst resp = await fetch(target, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\tbody: JSON.stringify({ url: url.trim() }),\n\t\t\t});\n\n\t\t\tif (!resp.ok) {\n\t\t\t\tconsole.error(\"POST Failed\");\n\t\t\t\tsetErrorText(\"Submission failed, please try again.\");\n\t\t\t\tsetShowError(true);\n\t\t\t} else {\n\t\t\t\tsetUrl(\"\");\n\t\t\t\tconsole.log(\"Success\");\n\t\t\t\tsetShowError(false);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(\"Network Error:\", err);\n\t\t\tsetErrorText(\"Error trying to contact server\");\n\t\t\tsetShowError(true);\n\t\t}\n\t}\n\n\t// Update the value of the url every time it's changed\n\tfunction updateText(e) {\n\t\tsetUrl(e.target.value);\n\t}\n\n\tfunction handleKeyDown(e) {\n\t\tif (e.key === \"Enter\") {\n\t\t\tsubmitSong();\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"Song-Entry\">\n\t\t\t<div className=\"Text-Input\">\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"URL-Input\"\n\t\t\t\t\tname=\"SoundCloud URL Input\"\n\t\t\t\t\tplaceholder=\"Enter SoundCloud URL...\"\n\t\t\t\t\tvalue={url}\n\t\t\t\t\tonChange={updateText}\n\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\tautoFocus\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"Hammer-Button\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={submitSong}\n\t\t\t\t\tref={buttonRef}\n\t\t\t\t>\n\t\t\t\t\tHAMMER\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t{/* Conditionally render error messages to the user */}\n\t\t\t<div className={`Error${showError ? \" visible\" : \"\"}`}>{errorText}</div>\n\t\t</div>\n\t);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}